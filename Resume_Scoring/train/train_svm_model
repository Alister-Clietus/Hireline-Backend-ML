import os
import fitz  # PyMuPDF
import re
import joblib
import numpy as np
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error

# Function to extract text from PDFs
def extract_text_from_pdf(pdf_path):
    doc = fitz.open(pdf_path)
    text = ""
    for page in doc:
        text += page.get_text()
    return text

# Preprocess text
def preprocess_text(text):
    text = text.lower()
    text = re.sub(r'[^a-zA-Z0-9\s]', '', text)
    return text

# Load data from the 'train' folder
train_folder = 'train'
pdf_files = [os.path.join(train_folder, f) for f in os.listdir(train_folder) if f.endswith('.pdf')]

# Dummy scores (replace with actual scores if available)
scores = np.random.randint(5, 10, len(pdf_files))

# Extract and preprocess text
resume_texts = [preprocess_text(extract_text_from_pdf(pdf)) for pdf in pdf_files]

# TF-IDF vectorization
vectorizer = TfidfVectorizer()
X = vectorizer.fit_transform(resume_texts)

# Train-test split
X_train, X_test, y_train, y_test = train_test_split(X, scores, test_size=0.2, random_state=42)

# Train the SVM model
model = SVR(kernel='linear')
model.fit(X_train, y_train)

# Predict and evaluate
predictions = model.predict(X_test)
mse = mean_squared_error(y_test, predictions)

print("Mean Squared Error:", mse)

# Save the model and vectorizer
joblib.dump(vectorizer, 'tfidf_vectorizer.pkl')
joblib.dump(model, 'svm_resume_scoring.pkl')
